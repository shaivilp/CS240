Exam 1 Format:
Part 1: Multiple Choice - 20 questions - 20 points
        MUST be completed by 11:59pm on Friday, February 23
        MUST use LockDown Browser

Part 2: Short Answer/Coding - 80 points
        MUST be completed *IN CLASS* on Wednesday, February 21
        Exam will become available at 9:30am
        MUST be submitted by 10:45am
        MUST use LockDown Browser


Exam 1 Topics:
- Data Types
- Formatting Output
- Typecasting
- Decision Statements
- Loops
- Symbloic Contants

Sample problems are available on Blackboard under
Content/Exams/Review Material

--------------------------------------------------
Decision Statements
- they allow the program to decide what set of code to execute 
- NOT a loop - only executed one time 

all of these types of if statements will be on the Exam

if(condition){
        code to execute when the condition is true
}

if(condition) {
        code to execute when the condition is true
} else {
        code to execute when the condition is false
}

//Called a cascading type of decision statement
if(condition1){
        code to execute when the condition is true
} else if(condition2){
        code to execute when condition1 is false and condition2 is true
} else {
        code to execute when all conditions are false
}

--------------------------------------------------
Loops
- allows a "chunk" of code to be executed multiple times
- the "chunk" of code is known as the body of the loop

format 1: - counting loop (for)
for(initialization; condition; change){
        body of the loop
}

- initialization: executed 1 time and is the first thing executed
- condition: must give true or false result
- body of the loop: - code to execute 1 time
                   - always executed after a true condition result
- change: always executed AFTER the body of the loop
          goes to the condition after this part 
- typically, the initialization, condition, and change portions of the loop with work with the same variable

- top driven loop (condition is checked before executing the body of the loop)
- minimum num of executions - 0
- max num of executuions - many

format 2: - not sure how many times something should repeat
while(condition){
        body of the loop
}
- top driven loop (condition is checked before executing the body of the loop)
- minimum num of executions - 0
- max num of executuions - many

- "read" loop pattern
priming read - goal is to get the first value
while(condition) { - condition should test the value in variable from the priming read
        process the value
        secondary read - goal is to get the next value to process
}


format 3: body of the loop should execute at least one time
do {
        body of the loop
}
while(condition);

- semi-colon is required
- body of the loop executes first, then the condition is checked
- the body of the loop with contuine to execute as long as the condition is true
- bottom driven loop (body of the loop then the condition)

- minimum num of executions - 1
- max num of executions - many
--------------------------------------------------
Data Types
int 
- values without decimal points
- range: +- 2 billion
- literal values: as is 
                  123
float
- values with decimal points
- range: +- 10^38
- literal values: as is
                  123.45
                  1.2e7 (1.2 * 10^7)
- significant digits: 6

double
- values with decimal points
- range: +- 10^308
- literal values: as is
                  123.45
                  1.2e7 (1.2 * 10^7)
- significant digits: 12

char 
- single character value
- 255 possible values
- literal values: must be in single quotes
                  '*'
                  'L'
                  'a'

*string
- not a standard data type
- multiple character value
- range: 0 characters (empty string)
         many characters
- literal values: must be in double quotes
                  "hello, world"
                
declare variables:
- format 1: data_type variable_name;

- format 2: data_type variable_name = value;
--------------------------------------------------

Formatting Output

setw - sets a MINIMUM width to use when displaying a value
     - must be a separate part of a cout statement (means it needs its own output operator)
     - must be set BEFORE the value to format
     - not persistent (means it must be set for each item that needs formatting)

     int num = 24680, num2 = 135791;

     cout << setw(7) << num;   //display num in a field 7 spaces wide

     cout << setw(8) << num << setw(10) << num2;  //display num in a field 8 spaces wide
                                                  //and num2 in a field 10 spaces wide


setprecision - when used alone, sets the MAXIMUM number of digits to display, includes both before
               and after the decimal point

             double result = 12.5829;

             cout << setprecision(4) << result;   //display the result value as 4 digits total
 
             Displays as 12.58


             - when used with fixed flag, sets number of digits after the decimal point

             double result = 12.5829;

             cout << setprecision(3) << fixed << result;   //display the result with 3 digits after dec. pt.
 
             Displays as 12.583.  (the display gets rounded up because of 9 being next digit)

             - no matter which version is used, must be separate part of cout
             - must be set before the item to be formatted
             - Persistent (only needs to be set one time)

fixed - when paired with setprecision, fixes the number of digits after the decimal point'
      - separate part of cout
      - set before things to be formatted
      - persistent

scientific - display float/double values in scientific notation
           - separate part of cout
           - set before things to be formatted
           - persistent

left - display values left justified (trailing spaces)
     - separate part of cout
     - set before things to be formatted
     - persistent

right - display values right justified (leading spaces)
      - separate part of cout
      - set before things to be formatted
      - persistent
      - default justification if one is not set

internal - display sign left justified, value is right justified
         - an extra spaces are between sign and value
         - separate part of cout
         - set before things to be formatted
         - persistent

showpos - display positive values with a leading plus sign
        - separate part of cout
        - set before things to be formatted
        - persistent

noshowpos - turn off display of a plus sign before positive values
          - separate part of cout
          - set before things to be formatted
          - persistent

endl - newline character
     - separate part of cout

\n - newline character
   - must be part of a string literal or used as a character literal

--------------------------------------------------
Typecasting
- this makes a variable to behave like a different data type for one
  Instance

- the cast must "make sense" - for example, can cast from one numeric
  type to another, but can't cast string to an integer

- format:   (data_type) variable
--------------------------------------------------
Symbolic Contant

- associates a name with a value that cannot be changed

- the name is used throughout the code rather than the value

- readability - use of the name makes the code easier to interpret

- change-ability - any change to the value is made in only one location (where
                   it was declared) rather than in multiple spots
                 - this reduces the likelihood of mistakes

- format 1 (C-style): #define NAME value

                      #define PI 3.14159

- format 2 (C++-style):  const data_type NAME = value;

                         const double PI = 3.14159;
